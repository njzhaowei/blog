<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>儿童编程02 Hello World</title>
    <link href="/myblog/2024/05/12/scai-02/"/>
    <url>/myblog/2024/05/12/scai-02/</url>
    
    <content type="html"><![CDATA[<h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><ol><li>自己动手，开发一个机器人，学会控制SCV。</li><li>学习Python中的while语句，代码块概念，print调用</li></ol><h1 id="一个机器人最少需要多少代码？"><a href="#一个机器人最少需要多少代码？" class="headerlink" title="一个机器人最少需要多少代码？"></a>一个机器人最少需要多少代码？</h1><figure class="highlight python"><figcaption><span>{.line-numbers}</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cybw<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br>client = cybw.BWAPIClient<br>Broodwar = cybw.Broodwar<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reconnect</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> client.connect():<br>        sleep(<span class="hljs-number">0.5</span>)<br>reconnect()<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> Broodwar.isInGame():<br>        client.update()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> client.isConnected():<br>            reconnect()<br><br>    <span class="hljs-keyword">while</span> Broodwar.isInGame():<br>        events = Broodwar.getEvents()<br>        <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> events:<br>            eventtype = e.getType()<br>        client.update()<br></code></pre></td></tr></tbody></table></figure><p>上面就是一个用Python语言编写的，最简单的机器人代码，总共20行。后面我们解释每一行代码的含义并不断扩充我们的代码，完成更多不同的任务。但在此之前，先让我们把这个最简单的（也是最简陋的）机器人运行起来，看看他都能干些什么吧。</p><h1 id="运行机器人代码"><a href="#运行机器人代码" class="headerlink" title="运行机器人代码"></a>运行机器人代码</h1><ol><li>右键点击<font color="red">代码根文件夹</font>，选择“通过Code打开”。<blockquote><p><span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>还记得代码根文件夹在哪吗？<br>在<font color="red">游戏根文件夹</font>下找到mybot文件夹，我们所有的代码都在这个文件夹下，后面我们把这个<font color="red">mybot</font>文件夹简称为<font color="red">代码根文件夹</font></p></blockquote></li><li>在左侧红圈处（我们称之为项目浏览器空白处）右键点击，选择“New File…”创建一个新的Python程序文件，并命名为“helloworld.py”</li></ol><p><img src="1.png"></p><p><img src="2.png"></p><blockquote><p>helloworld，就是hello world，作为一个良好的习惯，我们不在程序文件的文件名里面加空格。至于为什么要取这个名字，大概是代表这我们的小机器人来到这个世界上之后最想说的一句话吧“你好，世界”</p></blockquote><blockquote><p>.py叫文件后缀。电脑中每种文件基本都有各自的文件后缀，以便电脑能区分用什么软件打开这些文件。py是Python的缩写，代表这是一个python程序文件。</p></blockquote><ol start="3"><li>将上述代码拷贝到helloworld.py文件中并运行下，看看效果如何？</li></ol><p><img src="3.jpg"></p><blockquote><p><span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>还记得怎么运行我们的机器人吗？<br>提示一下<br>（a）按F5运行程序。<br>（b）运行Chaoslauncher.exe启动游戏</p></blockquote><p><img src="4.jpg"></p><h1 id="运行结果说明"><a href="#运行结果说明" class="headerlink" title="运行结果说明"></a>运行结果说明</h1><p>好像什么也没发生，游戏启动起来了，一个SCV傻傻的站在那，一动不动。为什么？为什么？为什么？<br>因为。。。。因为我们的机器人虽然启动了，但尚未被“注入灵魂”。对于程序而言，我们程序员就像上帝，而当前的程序代码并没让我们的SCV做什么事情，所以他当然只能傻傻的站着了。</p><p>但没关系，我们先了解下运行结果，熟悉下各个常用“窗口”到底什么意思，很快的，我们就可以让SCV做些事情，让他别总是那么傻傻地站着（额，难道是从“傻傻站着”变成“傻傻跑着”？）</p><h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><p>我们编写程序的软件叫编辑器，或者更专业的名字IDE。这个IDE是“集成开发环境”的英文缩写，听上去就很高深莫测的样子。</p><h2 id="控制台"><a href="#控制台" class="headerlink" title="控制台"></a>控制台</h2><p>在编辑器编写代码的下方，有个小窗口，叫终端（Terminal）也叫控制台（Console）。怎么叫都可以，当然，如果称呼他的英文，感觉更加高深莫测。<br>他是干什么的呢？主要用来显示程序运行过程中信息，你可以看到，当我们程序运行起来时里面不断闪过各种英文。相当于程序运行过程中，通过这个窗口和你窃窃私语。<br>“老大，我一会要生产个机枪兵了，你等着看哦”<br>“老大，我忙死了”<br>“老大，你看我这样运行对不对啊？不对？不对我也要这么运行，就是任性。”</p><p><img src="5.jpg"></p><p>当你看到如上图这样，程序在控制台打出“Connection successful”时，就是他在向你报告<br>“老大，我连上游戏了”</p><h2 id="程序控制按钮"><a href="#程序控制按钮" class="headerlink" title="程序控制按钮"></a>程序控制按钮</h2><p><img src="6.jpg"><br>当我们按F5启动程序之后，就可以在编辑器里面看到上图这个“控制按钮”，其中最右变两个分别是“重启程序”和“停止程序”，这是我们一会就要用到的按钮。其他按钮也很常用，等我们用到时再详细介绍。</p><blockquote><p>把鼠标悬停在按钮上，会出现按钮功能的说明文字哦。</p></blockquote><h1 id="代码讲解"><a href="#代码讲解" class="headerlink" title="代码讲解"></a>代码讲解</h1><p>下面，我们逐行讲解下代码，并在讲解的过程中做些小实验</p><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><p>我们从第10行开始讲起，我们首先遇到了while关键字，在编辑器中但凡遇到关键字都会给他特殊的颜色，python语言中有很多关键字，while是我们遇到的第一个，他的意思是“如果while后面的数值为True，则一直循环执行这个while管辖的所有代码”</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br></code></pre></td></tr></tbody></table></figure><p>while关键字就向一个忠实的看门人，他每次先检查下自己身后的信号灯是不是True，如果是，他就跑到自己管理的代码块里，把他管理的代码块都执行一遍，然后再回头检查下身后的信号灯。如此往复，直到信号灯变成False。</p><p>那这个while关键字到底管着多少代码呢？把鼠标移动到while关键字和“10”这个行号之间，会看到while前面出现了个小三角，点击这个三角，就会把while管理的代码块折叠起来，再点击一下，就会恢复展开。</p><p>哟吼，他管理的还不少呢。</p><p><img src="7.jpg"></p><blockquote><p><span class="github-emoji"><span>❓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>告诉我，第10行的这个while关键字管理的代码块，最远管理到哪？（哪一行？）</p></blockquote><p>在第10行冒号之后，我们键入回车，然后输入<code>print('I see you, zmh')</code>，然后点击<font color="red">程序控制按钮中的“重启程序（Restart）”按钮</font>，并<font color="red">重新启动游戏</font>。你是否在控制台看到程序在和你窃窃私语了呢？</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">'I see you, zmh'</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> Broodwar.isInGame():<br>        client.update()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> client.isConnected():<br>            reconnect()<br><br>    <span class="hljs-keyword">while</span> Broodwar.isInGame():<br>        events = Broodwar.getEvents()<br>        <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> events:<br>            eventtype = e.getType()<br>        client.update()<br></code></pre></td></tr></tbody></table></figure><p><img src="8.jpg"></p><blockquote><p>Python语言通过缩进来确定关键字管理代码的范围，以第10行的while关键字为例，从while之后的冒号”:”开始，分别管理着我们输入的print语句以及另外两个内部的while语句。print和内部的两个while是不是都是齐头并进的？我们称齐头并进的语句处于相同层级的代码块，也就是说都听他们的上级：第10行的那个while管理</p></blockquote><h2 id="print函数调用"><a href="#print函数调用" class="headerlink" title="print函数调用"></a>print函数调用</h2><p>print后面有个括号，我们把一个英文单词后跟一个括号的情况叫<font color="red">函数调用</font>意思是“请调用这个叫print的函数，做他该做的事情”。<br>哎哟，函数？是不是在哪听过？没错，就是数学上。</p><p>print后面跟括号，括号里的东东叫<font color="red">参数</font>。这里，print函数里面有一个参数，是一个用单引号括起来的东东<code>'I see you, zmh'</code>，我们管单引号<code>'</code>或双引号<code>"</code>括起来的一串东东叫<font color="red">字符串</font>也就是一串字符的意思。</p><p>那么，<code>print('I see you, zmh')</code>这句的完整含义就是，我有个一个字符串，字符串的内容是“I see you, zmh”，我将这个字符串作为参数，传给print函数，让他做他应该做的事情。</p><p>那print函数到底做什么事情的呢？他啊，就是把你传给他的参数显示到控制台的。我们常常通过print函数打印出一些文字，让我们的程序能在运行过程中与我们窃窃私语，从而让我们能了解程序干活干的怎么样，有没有遇到问题。</p><blockquote><p><span class="github-emoji"><span>❓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 除了<code>print('I see you, zmh')</code>，你还能打印什么内容到控制台？试试看，中英文都试试哦，然后截图会拍照让我检查。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>儿童编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SCAI</tag>
      
      <tag>StarCraft</tag>
      
      <tag>星际争霸</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>儿童编程01 准备开发环境</title>
    <link href="/myblog/2024/05/05/scai-01/"/>
    <url>/myblog/2024/05/05/scai-01/</url>
    
    <content type="html"><![CDATA[<h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><ol><li>准备编程所需要的各种软件（称之为<strong>开发环境</strong>）</li><li>编写第一个能够控制游戏中SCV的程序（称之为<strong>机器人或者bot</strong>）</li></ol><h1 id="学习内容"><a href="#学习内容" class="headerlink" title="学习内容"></a>学习内容</h1><ol><li>学会安装软件</li><li>学会使用软件</li><li>编写一个最简单的程序机器人（以后简称bot）并成功运行</li></ol><h1 id="开始学习"><a href="#开始学习" class="headerlink" title="开始学习"></a>开始学习</h1><blockquote><p>StarCraft是星际争霸游戏，至于安装的其他软件，我们以后会慢慢说明他们的用途</p></blockquote><h2 id="安装游戏"><a href="#安装游戏" class="headerlink" title="安装游戏"></a>安装游戏</h2><ol><li>解压StarCraft.zip到桌面，最终游戏路径类似<em>C:\Users\【你的用户名】\Desktop\StarCraft</em>，我们将这个文件夹称为<font color="red"><strong>游戏根文件夹</strong></font>，这个名称我们后面会经常遇到。<blockquote><p>你可能看不见“.zip”字样，这没关系，只要文件名前面是StarCraft就可以</p></blockquote><blockquote><p><span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>还记得如何解压么？还记得如何查看文件夹路径么？<br><img src="scai01.png"><br><img src="scai02.png"></p></blockquote></li></ol><h2 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h2><p>你学习的编程语言叫“Python”，中文意思是“蟒蛇”，我们通过安装Python来使用这门电脑编程语言。</p><ol><li>在<font color="red"><strong>游戏根文件夹</strong></font>下的software文件夹中找到<em>python-3.5.4.exe</em>并双击安装<br><img src="scai03.png"><br><img src="scai04.png"><br><img src="scai05.png"><br><img src="scai06.png"></li></ol><h2 id="安装BWAPI"><a href="#安装BWAPI" class="headerlink" title="安装BWAPI"></a>安装BWAPI</h2><p>我们的Python代码就是通过BWAPI这个软件来控制星际争霸游戏里面的各种元素（士兵、飞船、建筑等等）的。</p><ol><li>在<font color="red"><strong>游戏根文件夹</strong></font>下找到BWAPI_412.bat这个文件，双击完成注册表导入。当显示“操作成功完成”表示导入完成，这时点击键盘上任意按钮即可。(你可能不明白什么是注册表，没关系，我们以后也不会遇到他)<br><img src="scai07.png"><br><img src="scai08.png"></li><li>在<font color="red"><strong>游戏根文件夹</strong></font>下找到BWAPI_412_Setup.exe这个文件,双击安装BWAPI<br><img src="scai11.png"><br><img src="scai12.png"><br><img src="scai13.png"><br><img src="scai14.png"><br><img src="scai15.png"><br><img src="scai16.png"><br><img src="scai17.png"><br><img src="scai18.png"><br><img src="scai19.png"><br><img src="scai20.png"></li><li>安装完毕后<font color="red"><strong>游戏根文件夹</strong></font>会多出<strong>BWAPI</strong>和<strong>bwapi-data</strong>两个文件夹，其中BWAPI文件夹下的Chaoslauncher文件夹里面有个叫<strong>Chaoslauncher.exe</strong>的程序我们会经常用到。在桌面给他建个快捷方式吧。<blockquote><p><span class="github-emoji"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>还记得如何建快捷方式么？<br><img src="scai21.png"></p></blockquote></li><li>下面设置下，让每次运行<strong>Chaoslauncher.exe</strong>快捷方式时都以“管理员权限”运行。（也就是让这个程序能完全控制定能，这样它才能帮我们控制游戏里的各种元素）。右键点击快捷方式并选择“属性”。<br><img src="scai21a.png"><br>确保<font color="red"><strong>以管理员身份运行此程序</strong></font>前面的勾选框是勾上的。<br><img src="scai21b.png"></li></ol><h2 id="安装VSCode"><a href="#安装VSCode" class="headerlink" title="安装VSCode"></a>安装VSCode</h2><ol><li>在<font color="red"><strong>游戏根文件夹</strong></font>下的software文件夹中找到VSCodeUserSetup-x64-1.87.2.exe，双击安装<br><img src="scai22.png"><br><img src="scai23.png"><br><img src="scai24.png"><br><img src="scai25.png"><br><img src="scai26.png"><br><img src="scai27.png"><br><img src="scai28.png"></li></ol><h1 id="准备编程"><a href="#准备编程" class="headerlink" title="准备编程"></a>准备编程</h1><p>作了这么多准备工作，终于到了我们的代码了。这里准备了一个例子代码，名字叫mybot，意思就是“我的机器人”。</p><ol><li>在<font color="red"><strong>游戏根文件夹</strong></font>下找到mybot文件夹，我们所有的代码都在这个文件夹下，后面我们把<strong>游戏根文件夹</strong>下面的mybot文件夹简称为<font color="red"><strong>代码根文件夹</strong></font>。这个名称我们后面会经常遇到。<br><img src="scai29.png"></li><li>在<font color="red"><strong>代码根文件夹</strong></font>下的scripts文件夹里双击运行venv.bat文件，当看到类似下面的界面，表示运行成功。<br><img src="scai30.png"></li><li>在<font color="red"><strong>代码根文件夹</strong></font>下的scripts文件夹里双击运行init.bat文件，当看到类似下面的界面，表示运行成功。<br><img src="scai31.png"></li></ol><h1 id="开始编程"><a href="#开始编程" class="headerlink" title="开始编程"></a>开始编程</h1><ol><li>右键点击<font color="red"><strong>代码根文件夹</strong></font>，选择“通过Code打开”<br><img src="scai32.png"></li><li>第一次这么操作时会出现下图界面，按截图勾选并点击按钮即可<br><img src="scai33.png"></li><li>点击<img src="scai36.png">可以浏览代码，此时再点击mybot.py就可以看到机器人的代码了。<br><img src="scai34.png"></li><li>点击<img src="scai37.png">可以安装插件，在<font color="red"><strong>游戏根文件夹</strong></font>下的software文件夹中找到ms-python-release-2020.8.6.vsix并点击“Install”<br><img src="scai35.png"><br><img src="scai38.png"></li><li>当看到下述界面，表示一切就绪<br><img src="scai39.png"></li></ol><h1 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h1><ol><li>按F5键，将允许机器人代码，此时界面不断显示Game table mapping not found，这是机器人在等待游戏开始<br><img src="scai40.png"></li><li>还记得之前之前在桌面上创建的Chaoslauncher快捷方式么，这会终于用到它了。双击它，在随后弹出的界面中按下图选择，并最终点击“Start”<br><img src="scai41.png"><br><img src="scai42.png"></li><li>在游戏里选择游戏内容，游戏用户和加载地图（这里我们选择map_01.scm这第一个也是最简单的教学地图），确保选择了“Use Map Settings”<br><img src="scai43a.png"><br><img src="scai43b.png"><br><img src="scai43c.png"><br><img src="scai44.png"></li><li>到此为止，你得到了一个自动采矿的机器人。这个机器人就是有上面提到的mybot.py这个python代码控制的，当然，他现在还很低级，或者说和愚蠢，只会不停的采矿。随着你不断深入学习，完善他的功能，这个机器人将成长为智能、强大的战斗机器人，在星际争霸的游戏世界了大杀四方。<br><img src="scai45.png"></li></ol><style>td, th, tr {   border: none!important;}</style>]]></content>
    
    
    <categories>
      
      <category>儿童编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SCAI</tag>
      
      <tag>StarCraft</tag>
      
      <tag>星际争霸</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/myblog/2024/01/02/hello-world/"/>
    <url>/myblog/2024/01/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
